name: Trigger Jenkins & Collect Artifacts

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to build"
        default: "main"
      jenkins_job_url:
        description: "Full Jenkins job URL"
        default: "https://cloud.wolfssl-test.com/jenkins/job/wolfProvider/job/debian-extraction"
        required: true
  push:
    branches: [ "main" ]   # optional auto-run on push to main

jobs:
  trigger-jenkins:
    runs-on: ubuntu-latest
    outputs:
      build_tag: ${{ steps.set-tag.outputs.build_tag }}
    steps:
      - name: Trigger Jenkins build
        id: trigger
        run: |
          # Use input or fallback to hardcoded default
          JOB_URL="${{ github.event.inputs.jenkins_job_url || 'https://cloud.wolfssl-test.com/jenkins/job/wolfProvider/job/debian-extraction' }}"

          # Extract Jenkins base URL (including /jenkins path if present)
          JENKINS_BASE=$(echo "$JOB_URL" | grep -oP 'https?://[^/]+(/jenkins)?')

          echo "Jenkins URL: $JENKINS_BASE"
          echo "Job URL: $JOB_URL"

          # Test authentication first
          echo "Testing Jenkins authentication..."
          AUTH_TEST=$(curl -s -o /dev/null -w "%{http_code}" \
            "$JENKINS_BASE/api/json" \
            --user "aidan:${{ secrets.AIDANS_JENKINS_TOKEN }}")
          echo "Auth test status: $AUTH_TEST"

          if [ "$AUTH_TEST" != "200" ]; then
            echo "ERROR: Authentication failed (status: $AUTH_TEST)"
            exit 1
          fi

          # Get CSRF token (crumb) first
          echo "Getting CSRF token..."
          CRUMB=$(curl -s \
            "$JENKINS_BASE/crumbIssuer/api/json" \
            --user "aidan:${{ secrets.AIDANS_JENKINS_TOKEN }}" | jq -r '.crumb')

          if [ "$CRUMB" = "null" ] || [ -z "$CRUMB" ]; then
            echo "ERROR: Failed to get CSRF token"
            exit 1
          fi

          # Mask the crumb token to prevent leakage
          echo "::add-mask::$CRUMB"
          echo "CSRF token obtained"

          # Try simple build first (without parameters)
          echo "Trying simple build trigger..."
          SIMPLE_URL="${JOB_URL}/build"
          echo "Simple URL: $SIMPLE_URL"

          RESPONSE=$(curl -s -X POST -i \
            "$SIMPLE_URL?token=${{ secrets.JENKINS_API_TOKEN }}" \
            --user "aidan:${{ secrets.AIDANS_JENKINS_TOKEN }}" \
            -H "Jenkins-Crumb: $CRUMB")

          # Check if simple build worked
          HTTP_STATUS=$(echo "$RESPONSE" | grep -i "^HTTP" | head -1)
          echo "Simple build status: $HTTP_STATUS"

          # If simple build failed, try with parameters
          if [[ "$HTTP_STATUS" == *"500"* ]] || [[ "$HTTP_STATUS" == *"400"* ]]; then
            echo "Simple build failed, trying with parameters..."
            FULL_JOB_URL="${JOB_URL}/buildWithParameters"
            echo "Parameters URL: $FULL_JOB_URL"

            # Try with form data instead of query parameters
            RESPONSE=$(curl -s -X POST -i \
              "$FULL_JOB_URL" \
              --user "aidan:${{ secrets.AIDANS_JENKINS_TOKEN }}" \
              -H "Jenkins-Crumb: $CRUMB" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -d "token=${{ secrets.JENKINS_API_TOKEN }}&branch=${{ github.event.inputs.branch }}")
          fi

          # Show response for debugging
          echo "Response headers:"
          echo "$RESPONSE" | head -10

          # Extract Location header (queue item URL)
          QUEUE_URL=$(echo "$RESPONSE" | grep -i "^location:" | awk '{print $2}' | tr -d '\r')

          if [ -z "$QUEUE_URL" ]; then
            echo "ERROR: Failed to get queue URL from Jenkins"
            HTTP_STATUS=$(echo "$RESPONSE" | grep -i "^HTTP" | head -1)
            echo "HTTP Status: $HTTP_STATUS"
            echo "Response body (first 500 chars):"
            echo "$RESPONSE" | tail -n +20 | head -c 500
            exit 1
          fi

          echo "Jenkins job queued successfully"
          echo "Queue URL: $QUEUE_URL"
          echo "Waiting for job to start..."

          # Wait for job to move from queue to actual build
          BUILD_URL=""
          for i in {1..30}; do
            echo "Checking queue status (attempt $i/30)..."
            QUEUE_STATUS=$(curl -s "$QUEUE_URL/api/json" --user "aidan:${{ secrets.AIDANS_JENKINS_TOKEN }}" | jq -r '.executable.url // empty')

            if [ -n "$QUEUE_STATUS" ] && [ "$QUEUE_STATUS" != "null" ]; then
              BUILD_URL="$QUEUE_STATUS"
              echo "Build started: $BUILD_URL"
              break
            fi

            echo "Still in queue..."
            sleep 10
          done

          if [ -z "$BUILD_URL" ]; then
            echo "ERROR: Job did not start within 5 minutes"
            exit 1
          fi

          # Poll until build finishes
          echo "Polling build status..."
          while true; do
            STATUS=$(curl -s "$BUILD_URL/api/json" --user "aidan:${{ secrets.AIDANS_JENKINS_TOKEN }}" | jq -r '.result')
            if [[ "$STATUS" == "SUCCESS" ]]; then
              echo "Jenkins build succeeded."
              echo "build_url=$BUILD_URL" >> $GITHUB_OUTPUT
              break
            elif [[ "$STATUS" == "FAILURE" ]]; then
              echo "Jenkins build failed!"
              exit 1
            elif [[ "$STATUS" == "null" ]]; then
              echo "Build still running..."
              sleep 20
            else
              echo "Unknown status: $STATUS"
              sleep 10
            fi
          done

      - name: Determine Jenkins tag
        id: set-tag
        run: |
          BUILD_TAG="jenkins-artifacts-${GITHUB_RUN_ID}"
          echo "build_tag=$BUILD_TAG" >> $GITHUB_OUTPUT

      - name: Download .deb files from Jenkins
        run: |
          echo "Downloading .deb files from Jenkins build..."
          echo "Build URL: ${{ steps.trigger.outputs.build_url }}"
          
          mkdir -p ./artifacts
          cd ./artifacts
          
          # Get list of artifacts to find real filenames
          echo "Getting artifact list..."
          ARTIFACTS_JSON=$(curl -s "${{ steps.trigger.outputs.build_url }}/api/json" --user "aidan:${{ secrets.AIDANS_JENKINS_TOKEN }}" | jq '.artifacts')
          
          # Find all .deb files and their real names
          echo "All available artifacts:"
          echo "$ARTIFACTS_JSON" | jq -r '.[] | .fileName' | grep '\.deb$' | sort
          
          # Find FIPS packages
          FIPS_PACKAGES=$(echo "$ARTIFACTS_JSON" | jq -r '.[] | select(.fileName | contains("fips") and endswith(".deb")) | .fileName')
          NONFIPS_PACKAGES=$(echo "$ARTIFACTS_JSON" | jq -r '.[] | select(.fileName | (contains("fips") | not) and endswith(".deb")) | .fileName')
          
          echo ""
          echo "FIPS packages found:"
          echo "$FIPS_PACKAGES" | while read -r file; do
            if [ -n "$file" ] && [ "$file" != "null" ]; then
              echo "  - $file"
            fi
          done
          
          echo ""
          echo "Non-FIPS packages found:"
          echo "$NONFIPS_PACKAGES" | while read -r file; do
            if [ -n "$file" ] && [ "$file" != "null" ]; then
              echo "  - $file"
            fi
          done
          
          # Create subdirectories
          mkdir -p fips-packages nonfips-packages
          
          # Download FIPS packages
          echo ""
          echo "Downloading FIPS packages..."
          echo "$FIPS_PACKAGES" | while read -r file; do
            if [ -n "$file" ] && [ "$file" != "null" ]; then
              echo "  Downloading: $file"
              curl -u "aidan:${{ secrets.AIDANS_JENKINS_TOKEN }}" -L -o "fips-packages/$file" "${{ steps.trigger.outputs.build_url }}/artifact/artifacts/$file"
            fi
          done
          
          # Download Non-FIPS packages
          echo ""
          echo "Downloading Non-FIPS packages..."
          echo "$NONFIPS_PACKAGES" | while read -r file; do
            if [ -n "$file" ] && [ "$file" != "null" ]; then
              echo "  Downloading: $file"
              curl -u "aidan:${{ secrets.AIDANS_JENKINS_TOKEN }}" -L -o "nonfips-packages/$file" "${{ steps.trigger.outputs.build_url }}/artifact/artifacts/$file"
            fi
          done
          
          echo ""
          echo "Downloaded files:"
          echo "FIPS packages:"
          ls -lh fips-packages/ 2>/dev/null || echo "  No FIPS packages found"
          echo ""
          echo "Non-FIPS packages:"
          ls -lh nonfips-packages/ 2>/dev/null || echo "  No Non-FIPS packages found"
